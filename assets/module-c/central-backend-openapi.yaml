openapi: 3.1.0
info:
  title: Washing Machine API
  version: 1.0.0
  description: API for managing washing machines

servers:
  - url: <<base_url>>
    description: Development server

paths:
  /machines:
    get:
      summary: Get all machines
      description: Retrieves all available washing machines
      responses:
        '200':
          description: Successful retrieval
          content:
            application/json:
              schema:
                type: object
                properties:
                  machines:
                    type: array
                    items:
                      $ref: '#/components/schemas/Machine'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /machines/{id}:
    get:
      summary: Get machine by ID
      description: Retrieves detailed information about a specific washing machine
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the washing machine
      responses:
        '200':
          description: Successful retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        '404':
          description: Machine not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/register:
    post:
      summary: Register a new user
      description: Creates a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: Authentication token
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      summary: Login user
      description: Authenticates a user and returns a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: Authentication token
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/logout:
    post:
      summary: Logout user
      description: Invalidates the user's current token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      summary: Get current user
      description: Retrieves the current user's information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/credits:
    get:
      summary: Get user credits
      description: Retrieves the current user's credit balance
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Credits retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  credits:
                    type: number
                    description: User's credit balance
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add credits to user account
      description: Adds credits to the current user's account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: number
                  minimum: 1
                  description: Amount of credits to add
      responses:
        '200':
          description: Credits added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Credits added successfully"
                  credits:
                    type: number
                    description: Updated credit balance
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Machine:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the washing machine
        url:
          type: string
          description: The URL of the washing machine
        status:
          type: string
          description: The current status of the washing machine
        lastUsed:
          type: string
          format: date-time
          description: The timestamp of the last usage

    User:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the user
        email:
          type: string
          format: email
          description: User's email address
        credits:
          type: number
          description: User's credit balance

    Error:
      type: object
      properties:
        message:
          type: string
          description: The error message

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: string 